** Instruction Set Architecture for my relay-powered Von Neumann Architecture **

------------------------------------------
| Operation            | Code | Mnemonic |
------------------------------------------
| Load                 | 10h  | LOD      |
| Store                | 11h  | STO      |
| Add                  | 20h  | ADD      |
| Subtract             | 21h  | SUB      |
| Add with Carry       | 22h  | ADC      |
| Subtract with Borrow | 23h  | SBB      |
| Jump                 | 30h  | JMP      |
| Jump if Zero         | 31h  | JZ       |
| Jump if Carry        | 32h  | JC       |
| Jump if Not Zero     | 33h  | JNZ      |
| Jump if Not Carry    | 34h  | JNC      |
| Halt                 | FFh  | HLT      |
------------------------------------------

A - accumulator
Memory range = [0000h - FFFFh] (64KB memory, 16-bit addresses, 8192x8 RAM)

Operation format (ISA):
[MNEMONIC] [DESTINATION].[SOURCE]

Operation format (machine language): 
[ADDRESS]: [OPCODE]
[ADDRESS]: [HIGH-BYTE]
[ADDRESS]: [LOW-BYTE]

Follows Little-endian format (lower-byte stored in lower address)
Implementations can be done in ISA or machine language format - goal is to create assemblers/compilers and emulators for both in Python such that program running and memory updates can be viewed in realtime.

Both Machine Language and ISA formats can be found under the 'isa' directory. Example programs can be found in the 'programs' directory.